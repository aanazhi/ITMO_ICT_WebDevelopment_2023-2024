{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0420 3 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django \u0438 djangorestframework \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u0438\u0435\u043c","title":"\u041b\u0420 3"},{"location":"#3","text":"","title":"\u041b\u0420 3"},{"location":"#django-djangorestframework","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django \u0438 djangorestframework \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u0438\u0435\u043c"},{"location":"page1/","text":"task description \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u043b\u0435\u0447\u0435\u0431\u043d\u043e\u0439 \u043a\u043b\u0438\u043d\u0438\u043a\u0438. \u041f\u0440\u0438\u0435\u043c \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u0435\u0434\u0443\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0430\u0447\u0435\u0439 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439. \u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430 \u043a\u043b\u0438\u043d\u0438\u043a\u0438 \u0437\u0430\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0430\u044f \u043a\u0430\u0440\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0432\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0438\u0447\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0431\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0435\u0433\u043e \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u043d\u0438\u0439 (\u0434\u0438\u0430\u0433\u043d\u043e\u0437\u044b). \u041f\u0440\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u043c \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u0438 \u0432\u0440\u0430\u0447\u0430 \u0432 \u043a\u0430\u0440\u0442\u0435 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0438\u0435\u043c\u0430, \u0434\u0438\u0430\u0433\u043d\u043e\u0437, \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u043d\u043e\u0433\u043e, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u043b\u0435\u0447\u0435\u043d\u0438\u044e. \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438\u0435\u043c \u0432\u0435\u0434\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0441\u043d\u043e\u0432\u0435, \u043f\u043e\u0441\u043b\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u043f\u0430\u0446\u0438\u0435\u043d\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0438\u0435 \u0443\u0441\u043b\u0443\u0433\u0438 (\u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0438\u0435\u043c \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e). \u0420\u0430\u0441\u0447\u0435\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0440\u0430\u0447\u043e\u043c \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043f\u0440\u0435\u0439\u0441\u043a\u0443\u0440\u0430\u043d\u0442\u0443 \u043f\u043e \u043a\u043b\u0438\u043d\u0438\u043a\u0435. \u0414\u043b\u044f \u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0440\u0430\u0447: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043f\u043e\u043b, \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0438 \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0432 \u043a\u043b\u0438\u043d\u0438\u043a\u0435, \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u043c\u0443 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0443. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0440\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u043d\u0435\u0439. \u041f\u0440\u0438\u0435\u043c \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u0440\u0430\u0447\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0435\u0441\u0442\u0438 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430\u0445. \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 \u0438\u043c\u0435\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b, \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d.","title":"task description"},{"location":"page1/#task-description","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u043b\u0435\u0447\u0435\u0431\u043d\u043e\u0439 \u043a\u043b\u0438\u043d\u0438\u043a\u0438. \u041f\u0440\u0438\u0435\u043c \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u0435\u0434\u0443\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0430\u0447\u0435\u0439 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439. \u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430 \u043a\u043b\u0438\u043d\u0438\u043a\u0438 \u0437\u0430\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0430\u044f \u043a\u0430\u0440\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0432\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0438\u0447\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0431\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0435\u0433\u043e \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u043d\u0438\u0439 (\u0434\u0438\u0430\u0433\u043d\u043e\u0437\u044b). \u041f\u0440\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u043c \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u0438 \u0432\u0440\u0430\u0447\u0430 \u0432 \u043a\u0430\u0440\u0442\u0435 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0438\u0435\u043c\u0430, \u0434\u0438\u0430\u0433\u043d\u043e\u0437, \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u043d\u043e\u0433\u043e, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u043b\u0435\u0447\u0435\u043d\u0438\u044e. \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438\u0435\u043c \u0432\u0435\u0434\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0441\u043d\u043e\u0432\u0435, \u043f\u043e\u0441\u043b\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u043f\u0430\u0446\u0438\u0435\u043d\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0438\u0435 \u0443\u0441\u043b\u0443\u0433\u0438 (\u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0438\u0435\u043c \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e). \u0420\u0430\u0441\u0447\u0435\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0440\u0430\u0447\u043e\u043c \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043f\u0440\u0435\u0439\u0441\u043a\u0443\u0440\u0430\u043d\u0442\u0443 \u043f\u043e \u043a\u043b\u0438\u043d\u0438\u043a\u0435. \u0414\u043b\u044f \u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0440\u0430\u0447: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043f\u043e\u043b, \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0438 \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0432 \u043a\u043b\u0438\u043d\u0438\u043a\u0435, \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u043c\u0443 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0443. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0440\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u043d\u0435\u0439. \u041f\u0440\u0438\u0435\u043c \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u0440\u0430\u0447\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0435\u0441\u0442\u0438 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430\u0445. \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 \u0438\u043c\u0435\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b, \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d.","title":"task description"},{"location":"page2/","text":"models.py from django.db import models class Doctor(models.Model): first_name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) middle_name = models.CharField(max_length=50) specialty = models.CharField(max_length=100) education = models.CharField(max_length=100) gender = models.CharField(max_length=10) date_of_birth = models.DateField() date_of_start = models.DateField() date_of_end = models.DateField() contract_data = models.CharField(max_length=100) def __str__(self): return self.last_name class Cabinet(models.Model): name = models.CharField(max_length=50) work_schedule = models.CharField(max_length=100) responsible = models.CharField(max_length=50) internal_phone = models.CharField(max_length=20) def __str__(self): return self.name class Patient(models.Model): first_name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) middle_name = models.CharField(max_length=50) date_of_birth = models.DateField() medical_card_number = models.CharField(max_length=20) def __str__(self): return self.last_name class Appointment(models.Model): doctor = models.ForeignKey(Doctor, on_delete=models.CASCADE) patient = models.ForeignKey(Patient, on_delete=models.CASCADE) cabinet = models.ForeignKey(Cabinet, on_delete=models.CASCADE) date_time = models.DateTimeField() diagnosis = models.CharField(max_length=100) current_condition = models.CharField(max_length=100) treatment_recommendations = models.CharField(max_length=100) def __str__(self): return self.diagnosis class Payment(models.Model): appointment = models.ForeignKey(Appointment, on_delete=models.CASCADE) amount = models.DecimalField(max_digits=10, decimal_places=2) class MedicalService(models.Model): name = models.CharField(max_length=100) price = models.DecimalField(max_digits=10, decimal_places=2) class Schedule(models.Model): doctor = models.ForeignKey(Doctor, on_delete=models.CASCADE) day_of_week = models.IntegerField() start_time = models.TimeField() end_time = models.TimeField()","title":"models.py"},{"location":"page2/#modelspy","text":"from django.db import models class Doctor(models.Model): first_name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) middle_name = models.CharField(max_length=50) specialty = models.CharField(max_length=100) education = models.CharField(max_length=100) gender = models.CharField(max_length=10) date_of_birth = models.DateField() date_of_start = models.DateField() date_of_end = models.DateField() contract_data = models.CharField(max_length=100) def __str__(self): return self.last_name class Cabinet(models.Model): name = models.CharField(max_length=50) work_schedule = models.CharField(max_length=100) responsible = models.CharField(max_length=50) internal_phone = models.CharField(max_length=20) def __str__(self): return self.name class Patient(models.Model): first_name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) middle_name = models.CharField(max_length=50) date_of_birth = models.DateField() medical_card_number = models.CharField(max_length=20) def __str__(self): return self.last_name class Appointment(models.Model): doctor = models.ForeignKey(Doctor, on_delete=models.CASCADE) patient = models.ForeignKey(Patient, on_delete=models.CASCADE) cabinet = models.ForeignKey(Cabinet, on_delete=models.CASCADE) date_time = models.DateTimeField() diagnosis = models.CharField(max_length=100) current_condition = models.CharField(max_length=100) treatment_recommendations = models.CharField(max_length=100) def __str__(self): return self.diagnosis class Payment(models.Model): appointment = models.ForeignKey(Appointment, on_delete=models.CASCADE) amount = models.DecimalField(max_digits=10, decimal_places=2) class MedicalService(models.Model): name = models.CharField(max_length=100) price = models.DecimalField(max_digits=10, decimal_places=2) class Schedule(models.Model): doctor = models.ForeignKey(Doctor, on_delete=models.CASCADE) day_of_week = models.IntegerField() start_time = models.TimeField() end_time = models.TimeField()","title":"models.py"},{"location":"page3/","text":"admin.py from django.contrib import admin from .models import Doctor, Cabinet, Patient, Appointment, Payment, MedicalService, Schedule @admin.register(Doctor) class DoctorAdmin(admin.ModelAdmin): list_display = ('first_name', 'last_name', 'specialty', 'date_of_start', 'date_of_end') search_fields = ('first_name', 'last_name', 'specialty') list_filter = ('date_of_start', 'date_of_end') date_hierarchy = 'date_of_start' @admin.register(Cabinet) class CabinetAdmin(admin.ModelAdmin): list_display = ('name', 'work_schedule', 'responsible', 'internal_phone') search_fields = ('name', 'responsible') list_filter = ('work_schedule',) @admin.register(Patient) class PatientAdmin(admin.ModelAdmin): list_display = ('first_name', 'last_name', 'date_of_birth', 'medical_card_number') search_fields = ('first_name', 'last_name', 'medical_card_number') list_filter = ('date_of_birth',) @admin.register(Appointment) class AppointmentAdmin(admin.ModelAdmin): list_display = ('doctor', 'patient', 'cabinet', 'date_time', 'diagnosis') search_fields = ('doctor__first_name', 'doctor__last_name', 'patient__first_name', 'patient__last_name', 'diagnosis') list_filter = ('date_time',) date_hierarchy = 'date_time' @admin.register(Payment) class PaymentAdmin(admin.ModelAdmin): list_display = ('appointment', 'amount') search_fields = ('appointment__doctor__first_name', 'appointment__doctor__last_name', 'amount') list_filter = ('amount',) @admin.register(MedicalService) class MedicalServiceAdmin(admin.ModelAdmin): list_display = ('name', 'price') search_fields = ('name',) list_filter = ('price',) @admin.register(Schedule) class ScheduleAdmin(admin.ModelAdmin): list_display = ('doctor', 'day_of_week', 'start_time', 'end_time') search_fields = ('doctor__first_name', 'doctor__last_name') list_filter = ('day_of_week', 'start_time', 'end_time')","title":"admin.py"},{"location":"page3/#adminpy","text":"from django.contrib import admin from .models import Doctor, Cabinet, Patient, Appointment, Payment, MedicalService, Schedule @admin.register(Doctor) class DoctorAdmin(admin.ModelAdmin): list_display = ('first_name', 'last_name', 'specialty', 'date_of_start', 'date_of_end') search_fields = ('first_name', 'last_name', 'specialty') list_filter = ('date_of_start', 'date_of_end') date_hierarchy = 'date_of_start' @admin.register(Cabinet) class CabinetAdmin(admin.ModelAdmin): list_display = ('name', 'work_schedule', 'responsible', 'internal_phone') search_fields = ('name', 'responsible') list_filter = ('work_schedule',) @admin.register(Patient) class PatientAdmin(admin.ModelAdmin): list_display = ('first_name', 'last_name', 'date_of_birth', 'medical_card_number') search_fields = ('first_name', 'last_name', 'medical_card_number') list_filter = ('date_of_birth',) @admin.register(Appointment) class AppointmentAdmin(admin.ModelAdmin): list_display = ('doctor', 'patient', 'cabinet', 'date_time', 'diagnosis') search_fields = ('doctor__first_name', 'doctor__last_name', 'patient__first_name', 'patient__last_name', 'diagnosis') list_filter = ('date_time',) date_hierarchy = 'date_time' @admin.register(Payment) class PaymentAdmin(admin.ModelAdmin): list_display = ('appointment', 'amount') search_fields = ('appointment__doctor__first_name', 'appointment__doctor__last_name', 'amount') list_filter = ('amount',) @admin.register(MedicalService) class MedicalServiceAdmin(admin.ModelAdmin): list_display = ('name', 'price') search_fields = ('name',) list_filter = ('price',) @admin.register(Schedule) class ScheduleAdmin(admin.ModelAdmin): list_display = ('doctor', 'day_of_week', 'start_time', 'end_time') search_fields = ('doctor__first_name', 'doctor__last_name') list_filter = ('day_of_week', 'start_time', 'end_time')","title":"admin.py"},{"location":"page4/","text":"serializers.py from djoser.serializers import UserSerializer from rest_framework import serializers from djoser.serializers import TokenCreateSerializer from .models import Doctor, Cabinet, Patient, Appointment, Payment, MedicalService, Schedule class CustomTokenCreateSerializer(TokenCreateSerializer): def create(self, validated_data): token = super().create(validated_data) user = self.user token['user_id'] = user.id token['email'] = user.email return token class CustomUserSerializer(UserSerializer): class Meta(UserSerializer.Meta): fields = ('id', 'email', 'username', 'first_name', 'last_name', 'is_active', 'date_joined') class DoctorSerializer(serializers.ModelSerializer): class Meta: model = Doctor fields = '__all__' class CabinetSerializer(serializers.ModelSerializer): class Meta: model = Cabinet fields = '__all__' class PatientSerializer(serializers.ModelSerializer): class Meta: model = Patient fields = '__all__' class AppointmentSerializer(serializers.ModelSerializer): class Meta: model = Appointment fields = '__all__' class PaymentSerializer(serializers.ModelSerializer): class Meta: model = Payment fields = '__all__' class MedicalServiceSerializer(serializers.ModelSerializer): class Meta: model = MedicalService fields = '__all__' class ScheduleSerializer(serializers.ModelSerializer): class Meta: model = Schedule fields = '__all__'","title":"serializers.py"},{"location":"page4/#serializerspy","text":"from djoser.serializers import UserSerializer from rest_framework import serializers from djoser.serializers import TokenCreateSerializer from .models import Doctor, Cabinet, Patient, Appointment, Payment, MedicalService, Schedule class CustomTokenCreateSerializer(TokenCreateSerializer): def create(self, validated_data): token = super().create(validated_data) user = self.user token['user_id'] = user.id token['email'] = user.email return token class CustomUserSerializer(UserSerializer): class Meta(UserSerializer.Meta): fields = ('id', 'email', 'username', 'first_name', 'last_name', 'is_active', 'date_joined') class DoctorSerializer(serializers.ModelSerializer): class Meta: model = Doctor fields = '__all__' class CabinetSerializer(serializers.ModelSerializer): class Meta: model = Cabinet fields = '__all__' class PatientSerializer(serializers.ModelSerializer): class Meta: model = Patient fields = '__all__' class AppointmentSerializer(serializers.ModelSerializer): class Meta: model = Appointment fields = '__all__' class PaymentSerializer(serializers.ModelSerializer): class Meta: model = Payment fields = '__all__' class MedicalServiceSerializer(serializers.ModelSerializer): class Meta: model = MedicalService fields = '__all__' class ScheduleSerializer(serializers.ModelSerializer): class Meta: model = Schedule fields = '__all__'","title":"serializers.py"},{"location":"page5/","text":"view.py from rest_framework import viewsets, generics from .models import Doctor, Cabinet, Patient, Appointment, Payment, MedicalService, Schedule from .serializers import ( DoctorSerializer, CabinetSerializer, PatientSerializer, AppointmentSerializer, PaymentSerializer, MedicalServiceSerializer, ScheduleSerializer ) from django.contrib.auth.forms import UserCreationForm from django.contrib.auth import login as auth_login from django.views.generic.edit import FormView from django.urls import reverse_lazy from django.http import HttpResponseRedirect class UserCreateView(FormView): form_class = UserCreationForm success_url = reverse_lazy('token_create') def form_valid(self, form): user = form.save() auth_login(self.request, user) return HttpResponseRedirect(self.get_success_url()) class DoctorViewSet(viewsets.ModelViewSet): queryset = Doctor.objects.all() serializer_class = DoctorSerializer class DoctorDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = Doctor.objects.all() serializer_class = DoctorSerializer class CabinetViewSet(viewsets.ModelViewSet): queryset = Cabinet.objects.all() serializer_class = CabinetSerializer class CabinetDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = Cabinet.objects.all() serializer_class = CabinetSerializer class PatientViewSet(viewsets.ModelViewSet): queryset = Patient.objects.all() serializer_class = PatientSerializer class PatientDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = Patient.objects.all() serializer_class = PatientSerializer class AppointmentViewSet(viewsets.ModelViewSet): queryset = Appointment.objects.all() serializer_class = AppointmentSerializer class AppointmentDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = Appointment.objects.all() serializer_class = AppointmentSerializer class PaymentViewSet(viewsets.ModelViewSet): queryset = Payment.objects.all() serializer_class = PaymentSerializer class PaymentDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = Payment.objects.all() serializer_class = PaymentSerializer class MedicalServiceViewSet(viewsets.ModelViewSet): queryset = MedicalService.objects.all() serializer_class = MedicalServiceSerializer class MedicalServiceDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = MedicalService.objects.all() serializer_class = MedicalServiceSerializer class ScheduleViewSet(viewsets.ModelViewSet): queryset = Schedule.objects.all() serializer_class = ScheduleSerializer class ScheduleDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = Schedule.objects.all() serializer_class = ScheduleSerializer","title":"view.py"},{"location":"page5/#viewpy","text":"from rest_framework import viewsets, generics from .models import Doctor, Cabinet, Patient, Appointment, Payment, MedicalService, Schedule from .serializers import ( DoctorSerializer, CabinetSerializer, PatientSerializer, AppointmentSerializer, PaymentSerializer, MedicalServiceSerializer, ScheduleSerializer ) from django.contrib.auth.forms import UserCreationForm from django.contrib.auth import login as auth_login from django.views.generic.edit import FormView from django.urls import reverse_lazy from django.http import HttpResponseRedirect class UserCreateView(FormView): form_class = UserCreationForm success_url = reverse_lazy('token_create') def form_valid(self, form): user = form.save() auth_login(self.request, user) return HttpResponseRedirect(self.get_success_url()) class DoctorViewSet(viewsets.ModelViewSet): queryset = Doctor.objects.all() serializer_class = DoctorSerializer class DoctorDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = Doctor.objects.all() serializer_class = DoctorSerializer class CabinetViewSet(viewsets.ModelViewSet): queryset = Cabinet.objects.all() serializer_class = CabinetSerializer class CabinetDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = Cabinet.objects.all() serializer_class = CabinetSerializer class PatientViewSet(viewsets.ModelViewSet): queryset = Patient.objects.all() serializer_class = PatientSerializer class PatientDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = Patient.objects.all() serializer_class = PatientSerializer class AppointmentViewSet(viewsets.ModelViewSet): queryset = Appointment.objects.all() serializer_class = AppointmentSerializer class AppointmentDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = Appointment.objects.all() serializer_class = AppointmentSerializer class PaymentViewSet(viewsets.ModelViewSet): queryset = Payment.objects.all() serializer_class = PaymentSerializer class PaymentDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = Payment.objects.all() serializer_class = PaymentSerializer class MedicalServiceViewSet(viewsets.ModelViewSet): queryset = MedicalService.objects.all() serializer_class = MedicalServiceSerializer class MedicalServiceDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = MedicalService.objects.all() serializer_class = MedicalServiceSerializer class ScheduleViewSet(viewsets.ModelViewSet): queryset = Schedule.objects.all() serializer_class = ScheduleSerializer class ScheduleDetailViewSet(generics.RetrieveUpdateDestroyAPIView): queryset = Schedule.objects.all() serializer_class = ScheduleSerializer","title":"view.py"},{"location":"page6/","text":"urls.py from django.urls import path, include from rest_framework.routers import DefaultRouter from .views import ( UserCreateView, DoctorViewSet, DoctorDetailViewSet, CabinetViewSet, CabinetDetailViewSet, PatientViewSet, PatientDetailViewSet, AppointmentViewSet, AppointmentDetailViewSet, PaymentViewSet, PaymentDetailViewSet, MedicalServiceViewSet, MedicalServiceDetailViewSet, ScheduleViewSet, ScheduleDetailViewSet ) from djoser.views import TokenCreateView, TokenDestroyView, UserViewSet import djoser from rest_framework import routers router = DefaultRouter() router.register(r'doctors', DoctorViewSet, basename='doctor') router.register(r'cabinets', CabinetViewSet, basename='cabinet') router.register(r'patients', PatientViewSet, basename='patient') router.register(r'appointments', AppointmentViewSet, basename='appointment') router.register(r'payments', PaymentViewSet, basename='payment') router.register(r'medical-services', MedicalServiceViewSet, basename='medicalservice') router.register(r'schedules', ScheduleViewSet, basename='schedule') urlpatterns = [ path('', include(router.urls)), path('doctors/<int:pk>/', DoctorDetailViewSet.as_view(), name='doctor-detail'), path('cabinets/<int:pk>/', CabinetDetailViewSet.as_view(), name='cabinet-detail'), path('patients/<int:pk>/', PatientDetailViewSet.as_view(), name='patient-detail'), path('appointments/<int:pk>/', AppointmentDetailViewSet.as_view(), name='appointment-detail'), path('payments/<int:pk>/', PaymentDetailViewSet.as_view(), name='payment-detail'), path('medical-services/<int:pk>/', MedicalServiceDetailViewSet.as_view(), name='medicalservice-detail'), path('schedules/<int:pk>/', ScheduleDetailViewSet.as_view(), name='schedule-detail'), ]","title":"urls.py"},{"location":"page6/#urlspy","text":"from django.urls import path, include from rest_framework.routers import DefaultRouter from .views import ( UserCreateView, DoctorViewSet, DoctorDetailViewSet, CabinetViewSet, CabinetDetailViewSet, PatientViewSet, PatientDetailViewSet, AppointmentViewSet, AppointmentDetailViewSet, PaymentViewSet, PaymentDetailViewSet, MedicalServiceViewSet, MedicalServiceDetailViewSet, ScheduleViewSet, ScheduleDetailViewSet ) from djoser.views import TokenCreateView, TokenDestroyView, UserViewSet import djoser from rest_framework import routers router = DefaultRouter() router.register(r'doctors', DoctorViewSet, basename='doctor') router.register(r'cabinets', CabinetViewSet, basename='cabinet') router.register(r'patients', PatientViewSet, basename='patient') router.register(r'appointments', AppointmentViewSet, basename='appointment') router.register(r'payments', PaymentViewSet, basename='payment') router.register(r'medical-services', MedicalServiceViewSet, basename='medicalservice') router.register(r'schedules', ScheduleViewSet, basename='schedule') urlpatterns = [ path('', include(router.urls)), path('doctors/<int:pk>/', DoctorDetailViewSet.as_view(), name='doctor-detail'), path('cabinets/<int:pk>/', CabinetDetailViewSet.as_view(), name='cabinet-detail'), path('patients/<int:pk>/', PatientDetailViewSet.as_view(), name='patient-detail'), path('appointments/<int:pk>/', AppointmentDetailViewSet.as_view(), name='appointment-detail'), path('payments/<int:pk>/', PaymentDetailViewSet.as_view(), name='payment-detail'), path('medical-services/<int:pk>/', MedicalServiceDetailViewSet.as_view(), name='medicalservice-detail'), path('schedules/<int:pk>/', ScheduleDetailViewSet.as_view(), name='schedule-detail'), ]","title":"urls.py"},{"location":"page7/","text":"site view","title":"site view"},{"location":"page7/#site-view","text":"","title":"site view"},{"location":"page8/","text":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f URL: /auth/users/login/ Method: POST Auth required: \u041d\u0435\u0442 Permissions required: \u041d\u0435\u0442 Data constraints: \"username\": \"[string, required]\", \"email\": \"[string, required]\", \"password\": \"[string, required]\" Success Responses: Code: 201 CREATED Content: \"id\": \"[integer]\", \"username\": \"[string]\", \"email\": \"[string]\" \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f URL: /auth/users/ Method: POST Auth required: \u041d\u0435\u0442 Permissions required: \u041d\u0435\u0442 Data constraints: \"username\": \"[string, required]\", \"password\": \"[string, required]\" Success Responses: Code: 200 OK Content: \"token\": \"[string]\" \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f URL: /auth/user/<int:pk>/ Method: PUT Auth required: \u0414\u0430 Permissions required: IsAuthenticated Data constraints: \"username\": \"[string, optional]\", \"email\": \"[string, optional]\", \"password\": \"[string, optional]\" Success Responses: Code: 200 OK Content: \"id\": \"[integer]\", \"username\": \"[string]\", \"email\": \"[string]\"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"page8/#_1","text":"URL: /auth/users/login/ Method: POST Auth required: \u041d\u0435\u0442 Permissions required: \u041d\u0435\u0442 Data constraints: \"username\": \"[string, required]\", \"email\": \"[string, required]\", \"password\": \"[string, required]\" Success Responses: Code: 201 CREATED Content: \"id\": \"[integer]\", \"username\": \"[string]\", \"email\": \"[string]\"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"page8/#_2","text":"URL: /auth/users/ Method: POST Auth required: \u041d\u0435\u0442 Permissions required: \u041d\u0435\u0442 Data constraints: \"username\": \"[string, required]\", \"password\": \"[string, required]\" Success Responses: Code: 200 OK Content: \"token\": \"[string]\"","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"page8/#_3","text":"URL: /auth/user/<int:pk>/ Method: PUT Auth required: \u0414\u0430 Permissions required: IsAuthenticated Data constraints: \"username\": \"[string, optional]\", \"email\": \"[string, optional]\", \"password\": \"[string, optional]\" Success Responses: Code: 200 OK Content: \"id\": \"[integer]\", \"username\": \"[string]\", \"email\": \"[string]\"","title":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"}]}